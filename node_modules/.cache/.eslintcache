[{"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/index.js":"1","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/reportWebVitals.js":"2","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/App.js":"3","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/app/store.js":"4","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Nav.js":"5","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Banner.js":"6","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/axios.js":"7","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Requests.js":"8","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Row.js":"9","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/HomeScreen.js":"10","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/LoginScreen.js":"11","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/SignupScreen.js":"12","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/firebase-config.js":"13","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/features/userSlice.js":"14","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/ProfileScreen.js":"15"},{"size":637,"mtime":1653821640800,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1653766210534,"results":"18","hashOfConfig":"17"},{"size":1326,"mtime":1654205244041,"results":"19","hashOfConfig":"17"},{"size":184,"mtime":1654199025718,"results":"20","hashOfConfig":"17"},{"size":867,"mtime":1654247917098,"results":"21","hashOfConfig":"17"},{"size":2672,"mtime":1653976463797,"results":"22","hashOfConfig":"17"},{"size":133,"mtime":1653863016829,"results":"23","hashOfConfig":"17"},{"size":699,"mtime":1653864965638,"results":"24","hashOfConfig":"17"},{"size":1651,"mtime":1654321374879,"results":"25","hashOfConfig":"17"},{"size":906,"mtime":1653980428592,"results":"26","hashOfConfig":"17"},{"size":1785,"mtime":1654247958762,"results":"27","hashOfConfig":"17"},{"size":1577,"mtime":1654195614791,"results":"28","hashOfConfig":"17"},{"size":567,"mtime":1654178817780,"results":"29","hashOfConfig":"17"},{"size":479,"mtime":1654199700517,"results":"30","hashOfConfig":"17"},{"size":2299,"mtime":1654322880060,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y18jkc",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/index.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/reportWebVitals.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/App.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/app/store.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Nav.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Banner.js",["81"],[],"import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport Nav from \"./Nav\";\nimport \"./Banner.css\";\nimport axios from \"./axios\";\nimport requests from \"./Requests\";\n\n//  this file includes nav bar tag so as to make of its functionality (background black when banner goes up )\n\nfunction Banner() {\n  // --------------------------------------------------- Nav Background colour change\n\n  const targetRef = useRef(null);\n  const [show, handleShow] = useState(false);\n\n  const callBackFunction = (entries) => {\n    const [entry] = entries;\n    handleShow(entry.isIntersecting);\n  };\n\n  const options = useMemo(() => {\n    return {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 0.8,\n    };\n  }, []);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(callBackFunction, options);\n    const currentTarget = targetRef.current;\n    if (currentTarget) observer.observe(currentTarget);\n\n    return () => {\n      if (currentTarget) observer.unobserve(currentTarget);\n    };\n  }, []);\n  // --------------------------------------------------------- Banner work down here\n\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n\n      return request;\n    }\n\n    fetchData();\n  }, []);\n\n  const truncate = (string, n) => {\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\n  };\n\n  // console.log(movie);\n\n  // https://image.tmdb.org/t/p/w500/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\n\n  return (\n    <>\n      <Nav show={show} />\n\n      <header\n        ref={targetRef}\n        className=\"banner\"\n        style={{\n          backgroundSize: \"cover\",\n          // backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n          backgroundImage: `url(\"https://image.tmdb.org/t/p/w500/${movie.backdrop_path}\")`,\n          backgroundPosition: \"center center\",\n        }}\n      >\n        <div className=\"banner_contents\">\n          <h1 className=\"banner_title\">\n            {movie?.name || movie?.title || movie?.original_name}\n          </h1>\n          <div className=\"banner_buttons\">\n            <button className=\"banner_button\">Play</button>\n            <button className=\"banner_button\">More Info</button>\n          </div>\n          <h1 className=\"banner_description\">\n            {truncate(movie?.overview, 200)}\n          </h1>\n        </div>\n        <div className=\"banner_fadebutton\"></div>\n      </header>\n    </>\n  );\n}\n\nexport default Banner;\n","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/axios.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Requests.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/Row.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/HomeScreen.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/LoginScreen.js",["82","83","84","85"],[],"import React, { useEffect, useState } from \"react\";\nimport { auth } from \"./firebase-config\";\nimport \"./LoginScreen.css\";\nimport SignupScreen from \"./SignupScreen\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction LoginScreen() {\n  const [signIn, setSignIn] = useState(false);\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"loginScreen\">\n      <div className=\"loginScreen_background\">\n        <img\n          // onClick={setSignIn(false)}\n          className=\"loginScreen_logo\"\n          src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\n          // logo png image taken from : https://www.freepnglogos.com/images/netflix-logo-png-2562.html\n          alt=\"image\"\n        />\n\n        <button onClick={() => setSignIn(true)} className=\"signInbtn\">\n          Sign In\n        </button>\n\n        <div className=\"loginScreen_gradient\"></div>\n\n        <div className=\"loginScreen_body\">\n          {signIn ? (\n            <SignupScreen setSignIn={setSignIn} />\n          ) : (\n            <>\n              <h1>Unlimited movies,tv shows and more.</h1>\n              <h2>Watch anywhere, cancel at any time</h2>\n              <h3>\n                Ready to watch? Enter you email to create or restart your\n                membership\n              </h3>\n              <div className=\"loginScreen_input\">\n                <form>\n                  <input type=\"email\" placeholder=\"Email address\" />\n                  <button\n                    onClick={() => setSignIn(true)}\n                    className=\"loginScreen_getStarted\"\n                  >\n                    Get Started\n                  </button>\n                </form>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/SignupScreen.js",["86"],[],"import React, { useRef } from \"react\";\nimport \"./SignupScreen.css\";\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { auth, db } from \"./firebase-config\";\nfunction SignupScreen({ setSignIn }) {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  const register = (e) => {\n    e.preventDefault();\n\n    createUserWithEmailAndPassword(\n      auth,\n      emailRef.current.value,\n      passwordRef.current.value\n    )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n  const signin = (e) => {\n    e.preventDefault();\n\n    signInWithEmailAndPassword(\n      auth,\n      emailRef.current.value,\n      passwordRef.current.value\n    )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n  return (\n    <div className=\"signupScreen\">\n      <form className=\"signupForm\">\n        <h2>Sign In</h2>\n\n        <input\n          ref={emailRef}\n          type=\"email\"\n          placeholder=\"Email or Phone number\"\n        />\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n        <button onClick={signin} type=\"submit\">\n          Sign In\n        </button>\n        <h4>\n          <span className=\"signupScreen_grey\">New to Netflix? </span>\n          <span className=\"signupScreen_link\" onClick={register}>\n            Sign up now.\n          </span>\n        </h4>\n      </form>\n    </div>\n  );\n}\n\nexport default SignupScreen;\n","/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/firebase-config.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/features/userSlice.js",[],[],"/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/screens/ProfileScreen.js",["87"],[],"import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport Nav from \"../Nav\";\nimport \"./ProfileScreen.css\";\nimport { signOut } from \"firebase/auth\";\nimport { auth } from \"./firebase-config\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction ProfileScreen() {\n  const user = useSelector(selectUser);\n  const navigate = useNavigate();\n\n  const signOut_user = () => signOut(auth);\n\n  return (\n    <div className=\"profileScreen\">\n      <Nav show={true} />\n      <div className=\"profileScreen_body\">\n        <h1>Edit Profile</h1>\n        <div className=\"profileScreen_info\">\n          <img\n            src=\"https://i.pinimg.com/originals/b4/0f/9f/b40f9f8fc0fb88aabf2a8acbc39c0ac0.png\"\n            alt=\"\"\n          />\n          <div className=\"profileScreen_details\">\n            <h2>{user.email}</h2>\n            <div className=\"profileScreen_plans\">\n              <h3>Plans (Current plan : basic)</h3>\n              <p>Renewal date : 01/07/2022</p>\n              <div className=\"plans_grid\">\n                <div className=\"plan\">\n                  <div className=\"plans\">\n                    <h4>Basic</h4>\n                    <h5>480p</h5>\n                  </div>\n                  <div className=\"subscribe_btn\">\n                    <button>subscribe</button>\n                  </div>\n                </div>\n\n                <div className=\"plan\">\n                  <div className=\"plans\">\n                    <h4>Standard</h4>\n                    <h5>1080p</h5>\n                  </div>\n                  <div className=\"subscribe_btn\">\n                    <button>subscribe</button>\n                  </div>\n                </div>\n\n                <div className=\"plan\">\n                  <div className=\"plans\">\n                    <h4>Premium</h4>\n                    <h5>4K+HDR</h5>\n                  </div>\n                  <div className=\"subscribe_btn\">\n                    <button>subscribe</button>\n                  </div>\n                </div>\n              </div>\n              <button onClick={signOut_user} className=\"profileScreen_signOut\">\n                Sign out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileScreen;\n",{"ruleId":"88","severity":1,"message":"89","line":36,"column":6,"nodeType":"90","endLine":36,"endColumn":8,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":26},{"ruleId":"92","severity":1,"message":"96","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":14},{"ruleId":"92","severity":1,"message":"97","line":9,"column":9,"nodeType":"94","messageId":"95","endLine":9,"endColumn":17},{"ruleId":"98","severity":1,"message":"99","line":14,"column":9,"nodeType":"100","endLine":20,"endColumn":11},{"ruleId":"92","severity":1,"message":"101","line":7,"column":16,"nodeType":"94","messageId":"95","endLine":7,"endColumn":18},{"ruleId":"92","severity":1,"message":"97","line":12,"column":9,"nodeType":"94","messageId":"95","endLine":12,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","ArrayExpression",["102"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'auth' is defined but never used.","'navigate' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'db' is defined but never used.",{"desc":"103","fix":"104"},"Update the dependencies array to be: [options]",{"range":"105","text":"106"},[1013,1015],"[options]"]