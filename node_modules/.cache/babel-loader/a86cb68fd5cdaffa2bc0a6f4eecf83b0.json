{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0,\n  status: \"idle\"\n};\n\nfunction fetchCount() {\n  let amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return new Promise(resolve => setTimeout(() => resolve({\n    data: amount\n  }), 500));\n} // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\n\nexport const incrementAsync = createAsyncThunk(\"counter/fetchCount\", async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","value","status","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","response","counterSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","increment","decrement","incrementByAmount","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/features/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n  status: \"idle\",\n};\n\nfunction fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  \"counter/fetchCount\",\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CADY;EAEnBC,MAAM,EAAE;AAFW,CAArB;;AAKA,SAASC,UAAT,GAAgC;EAAA,IAAZC,MAAY,uEAAH,CAAG;EAC9B,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IACjBC,UAAU,CAAC,MAAMD,OAAO,CAAC;IAAEE,IAAI,EAAEJ;EAAR,CAAD,CAAd,EAAkC,GAAlC,CADL,CAAP;AAGD,C,CAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMK,cAAc,GAAGX,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOM,MAAP,IAAkB;EAChB,MAAMM,QAAQ,GAAG,MAAMP,UAAU,CAACC,MAAD,CAAjC,CADgB,CAEhB;;EACA,OAAOM,QAAQ,CAACF,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMG,YAAY,GAAGZ,WAAW,CAAC;EACtCa,IAAI,EAAE,SADgC;EAEtCZ,YAFsC;EAGtC;EACAa,QAAQ,EAAE,EAJ4B;EAKtC;EACA;EACAC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWP,cAAc,CAACQ,OAD1B,EACoCC,KAAD,IAAW;MAC1CA,KAAK,CAAChB,MAAN,GAAe,SAAf;IACD,CAHH,EAIGc,OAJH,CAIWP,cAAc,CAACU,SAJ1B,EAIqC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACpDF,KAAK,CAAChB,MAAN,GAAe,MAAf;MACAgB,KAAK,CAACjB,KAAN,IAAemB,MAAM,CAACC,OAAtB;IACD,CAPH;EAQD;AAhBqC,CAAD,CAAhC;AAmBP,OAAO,MAAM;EAAEC,SAAF;EAAaC,SAAb;EAAwBC;AAAxB,IAA8Cb,YAAY,CAACc,OAAjE,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIR,KAAD,IAAWA,KAAK,CAACS,OAAN,CAAc1B,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAM2B,cAAc,GAAIxB,MAAD,IAAY,CAACyB,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC1BF,QAAQ,CAACL,iBAAiB,CAACpB,MAAD,CAAlB,CAAR;EACD;AACF,CALM;AAOP,eAAeO,YAAY,CAACqB,OAA5B"},"metadata":{},"sourceType":"module"}