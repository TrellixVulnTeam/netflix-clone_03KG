{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: null // status: \"idle\",\n\n}; // --------------------------------------------------------\n\nfunction fetchCount() {\n  let amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return new Promise(resolve => setTimeout(() => resolve({\n    data: amount\n  }), 500));\n} // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\n\nexport const incrementAsync = createAsyncThunk(\"counter/fetchCount\", async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n}); // --------------------------------------------------------\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) // youtube pe dekhke likhna hai\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","user","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","response","userSlice","name","reducers","login","state","action","extraReducers","builder","addCase","pending","status","fulfilled","value","payload","increment","decrement","incrementByAmount","counterSlice","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/features/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  user: null,\n  // status: \"idle\",\n};\n\n// --------------------------------------------------------\nfunction fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  \"counter/fetchCount\",\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\n// --------------------------------------------------------\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action),\n    // youtube pe dekhke likhna hai\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IADa,CAEnB;;AAFmB,CAArB,C,CAKA;;AACA,SAASC,UAAT,GAAgC;EAAA,IAAZC,MAAY,uEAAH,CAAG;EAC9B,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IACjBC,UAAU,CAAC,MAAMD,OAAO,CAAC;IAAEE,IAAI,EAAEJ;EAAR,CAAD,CAAd,EAAkC,GAAlC,CADL,CAAP;AAGD,C,CAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMK,cAAc,GAAGV,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOK,MAAP,IAAkB;EAChB,MAAMM,QAAQ,GAAG,MAAMP,UAAU,CAACC,MAAD,CAAjC,CADgB,CAEhB;;EACA,OAAOM,QAAQ,CAACF,IAAhB;AACD,CAN2C,CAAvC,C,CASP;;AACA,OAAO,MAAMG,SAAS,GAAGX,WAAW,CAAC;EACnCY,IAAI,EAAE,MAD6B;EAEnCX,YAFmC;EAGnC;EACAY,QAAQ,EAAE;IACRC,KAAK,GAAGC,KAAK,EAAEC,MAAV,CADG,CAER;;EAFQ,CAJyB;EAQnC;EACA;EACAC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWV,cAAc,CAACW,OAD1B,EACoCL,KAAD,IAAW;MAC1CA,KAAK,CAACM,MAAN,GAAe,SAAf;IACD,CAHH,EAIGF,OAJH,CAIWV,cAAc,CAACa,SAJ1B,EAIqC,CAACP,KAAD,EAAQC,MAAR,KAAmB;MACpDD,KAAK,CAACM,MAAN,GAAe,MAAf;MACAN,KAAK,CAACQ,KAAN,IAAeP,MAAM,CAACQ,OAAtB;IACD,CAPH;EAQD;AAnBkC,CAAD,CAA7B;AAsBP,OAAO,MAAM;EAAEC,SAAF;EAAaC,SAAb;EAAwBC;AAAxB,IAA8CC,YAAY,CAACC,OAAjE,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIf,KAAD,IAAWA,KAAK,CAACgB,OAAN,CAAcR,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMS,cAAc,GAAI5B,MAAD,IAAY,CAAC6B,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC1BF,QAAQ,CAACN,iBAAiB,CAACvB,MAAD,CAAlB,CAAR;EACD;AACF,CALM;AAOP,eAAewB,YAAY,CAACQ,OAA5B"},"metadata":{},"sourceType":"module"}