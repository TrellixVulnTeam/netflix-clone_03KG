{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { act } from \"react-dom/test-utils\";\nconst initialState = {\n  user: null // status: \"idle\",\n\n}; // --------------------------------------------------------\n\nfunction fetchCount() {\n  let amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return new Promise(resolve => setTimeout(() => resolve({\n    data: amount\n  }), 500));\n} // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n// export const incrementAsync = createAsyncThunk(\n//   \"counter/fetchCount\",\n//   async (amount) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n// --------------------------------------------------------\n\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    }\n  }\n});\nexport const {\n  login,\n  logout\n} = userSlice.actions;\nexport const selectUser = state => state.user.user;\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","act","initialState","user","fetchCount","amount","Promise","resolve","setTimeout","data","userSlice","name","reducers","login","state","action","payload","logout","actions","selectUser","reducer"],"sources":["/Users/jatingoyal/Desktop/coding/react/netflix-clone-yt/src/features/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { act } from \"react-dom/test-utils\";\n\nconst initialState = {\n  user: null,\n  // status: \"idle\",\n};\n\n// --------------------------------------------------------\nfunction fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n// export const incrementAsync = createAsyncThunk(\n//   \"counter/fetchCount\",\n//   async (amount) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\n// --------------------------------------------------------\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,GAAT,QAAoB,sBAApB;AAEA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IADa,CAEnB;;AAFmB,CAArB,C,CAKA;;AACA,SAASC,UAAT,GAAgC;EAAA,IAAZC,MAAY,uEAAH,CAAG;EAC9B,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IACjBC,UAAU,CAAC,MAAMD,OAAO,CAAC;IAAEE,IAAI,EAAEJ;EAAR,CAAD,CAAd,EAAkC,GAAlC,CADL,CAAP;AAGD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,OAAO,MAAMK,SAAS,GAAGV,WAAW,CAAC;EACnCW,IAAI,EAAE,MAD6B;EAEnCT,YAFmC;EAGnC;EACAU,QAAQ,EAAE;IACRC,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACxBD,KAAK,CAACX,IAAN,GAAaY,MAAM,CAACC,OAApB;IACD,CAHO;IAIRC,MAAM,EAAGH,KAAD,IAAW;MACjBA,KAAK,CAACX,IAAN,GAAa,IAAb;IACD;EANO;AAJyB,CAAD,CAA7B;AAcP,OAAO,MAAM;EAAEU,KAAF;EAASI;AAAT,IAAoBP,SAAS,CAACQ,OAApC;AAEP,OAAO,MAAMC,UAAU,GAAIL,KAAD,IAAWA,KAAK,CAACX,IAAN,CAAWA,IAAzC;AAEP,eAAeO,SAAS,CAACU,OAAzB"},"metadata":{},"sourceType":"module"}